JAVA    = java
JAVAC   = javac
JAR     = jar
J_NQP   = @shquot(@j_nqp@)@
# J_GEN_CAT is only used in command lines, can be pre-quoted
J_GEN_CAT = @shquot(@script(gen-cat.nqp)@)@ jvm

NQP_PREFIX = @nqp_prefix@

J_BUILD_DIR = @nfp(gen/jvm)@

J_LIBPATH = @nqp::libdir@

NQP_JARS = @nqp_jars@
BLD_NQP_JARS = @bld_nqp_jars@

J_RUN_NQP_RR = $(JAVA) -Xss1m -Xms500m -Xmx3000m -cp @q(@nfp(./blib)@@cpsep@@nop($(BLD_NQP_JARS))@@cpsep@rakudo-runtime.jar@cpsep@@nop($(SYSROOT))@@abs2rel(@nqp_classpath@)@)@ nqp
J_RUN_PERL6 = $(JAVA) -Xss1m -Xms500m -Xmx3000m -cp @q(@nfp(./blib)@@cpsep@@nop($(BLD_NQP_JARS))@@cpsep@rakudo-runtime.jar@cpsep@perl6.jar@cpsep@@nop($(SYSROOT))@@abs2rel(@nqp_classpath@)@)@ perl6

RUNTIME_JAVAS = @nfp(src/vm/jvm/runtime/org/perl6/rakudo/*.java)@

RUNTIME_JAR = rakudo-runtime.jar

J_BAT    = @runner_suffix@
J_RUNNER = @j_runner@

# files we create
PERL6_JAR     = perl6.jar
PERL6_ML_JAR  = @nfp(blib/Perl6/ModuleLoader.jar)@
PERL6_W_JAR   = @nfp(blib/Perl6/World.jar)@
PERL6_G_JAR   = @nfp(blib/Perl6/Grammar.jar)@
PERL6_OPS_JAR = @nfp(blib/Perl6/Ops.jar)@
PERL6_A_JAR   = @nfp(blib/Perl6/Actions.jar)@
PERL6_O_JAR   = @nfp(blib/Perl6/Optimizer.jar)@
PERL6_P_JAR   = @nfp(blib/Perl6/Pod.jar)@
PERL6_C_JAR   = @nfp(blib/Perl6/Compiler.jar)@
PERL6_M_JAR   = @nfp(blib/Perl6/Metamodel.jar)@
PERL6_B_JAR   = @nfp(blib/Perl6/BOOTSTRAP.jar)@
SETTING_JAR   = CORE.setting.jar
SETTING_D_JAR = CORE.d.setting.jar

PERL6_LANG_JARS = $(PERL6_ML_JAR) $(PERL6_W_JAR) $(PERL6_G_JAR) $(PERL6_OPS_JAR) $(PERL6_A_JAR) \
  $(PERL6_O_JAR) $(PERL6_P_JAR) $(PERL6_C_JAR) $(PERL6_M_JAR) $(PERL6_B_JAR)

J_METAMODEL_SOURCES = $(COMMON_BOOTSTRAP_SOURCES) \
  @nfp(src/vm/jvm/Perl6/Metamodel/JavaHOW.nqp)@ \

# The ordering here is important for bootstrapping reasons. In general:
# * traits almost certainly have to come first
# * stubs have to come after traits since they use them
# * Attribute needs to come before anything that uses an attribute
# We break various other circularities in Perl6::Metamodel::BOOTSTRAP.
# Note that you only really have to worry especially about things that
# the compiler will instantiate/call methods on while compiling the
# setting - basically anything that feels MOP-ish.
J_CORE_SOURCES = \
	@insert_filelist(core_sources)@
@for_specs(
J_CORE_@ucspec@_SOURCES = \
    @insert_filelist(rev_core_sources)@
)@

PERL6_DEBUG_JAR = perl6-debug.jar
J_DEBUG_RUNNER = perl6-debug-j@runner_suffix@

J_CLEANUPS = \
  *.manifest \
  @nfp(blib/Perl6/*.jar)@ \
  $(SETTING_JAR) \
  $(SETTING_D_JAR) \
  $(PERL6_JAR) \
  j-rakudo_test_run.tar.gz \
  @nfp($(J_BUILD_DIR)/*)@ \
  $(RUNTIME_JAR) \
  perl6-eval-server \
  perl6-jdb-server \
  eval-client.pl \
  $(J_RUNNER) \
  $(PERL6_DEBUG_JAR) \
  $(J_DEBUG_RUNNER) \

HARNESS_TYPE =

J_HARNESS5 = $(PERL5) @nfp(t/harness5)@ --jvm
J_HARNESS5_WITH_FUDGE = $(J_HARNESS5) --fudge --keep-exit-code

j-all: check_@backend_prefix@_nqp_version $(PERL6_JAR) $(SETTING_JAR) $(SETTING_D_JAR) $(J_RUNNER) eval-client.pl  $(PERL6_DEBUG_JAR) $(J_DEBUG_RUNNER)

check_@backend_prefix@_nqp_version: @@script(check-nqp-version.pl)@@
	$(PERL5) @shquot(@script(check-nqp-version.pl)@)@ $(J_NQP)

$(RUNTIME_JAR): $(RUNTIME_JAVAS)
	$(MKPATH) bin
	$(JAVAC) -source 1.9 -cp @q($(BLD_NQP_JARS))@ -g -d bin -encoding UTF8 $(RUNTIME_JAVAS)
	$(JAR) cf0 rakudo-runtime.jar -C bin@slash@ .

$(PERL6_ML_JAR): @nfpl(src/Perl6/ModuleLoader.nqp src/vm/jvm/ModuleLoaderVMConfig.nqp src/vm/jvm/Perl6/JavaModuleLoader.nqp gen/nqp-version)@
	$(J_NQP) $(J_GEN_CAT) @nfpl(src/vm/jvm/ModuleLoaderVMConfig.nqp src/Perl6/ModuleLoader.nqp src/vm/jvm/Perl6/JavaModuleLoader.nqp)@ > @nfpq($(J_BUILD_DIR)/ModuleLoader.nqp)@
	$(J_NQP) --module-path=blib --target=jar --output=$(PERL6_ML_JAR) \
	    @nfpq($(J_BUILD_DIR)/ModuleLoader.nqp)@

$(PERL6_OPS_JAR): @nfpl(src/vm/jvm/Perl6/Ops.nqp gen/nqp-version)@
	$(J_NQP) --module-path=blib --target=jar --output=$(PERL6_OPS_JAR) \
	    @nfp(src/vm/jvm/Perl6/Ops.nqp)@

$(PERL6_W_JAR): $(PERL6_ML_JAR) $(PERL6_OPS_JAR) $(PERL6_P_JAR) @nfp(src/Perl6/World.nqp)@
	$(J_NQP) --module-path=blib --target=jar --output=$(PERL6_W_JAR) \
	    @nfp(src/Perl6/World.nqp)@

$(PERL6_P_JAR): @nfpl(src/Perl6/Pod.nqp gen/nqp-version)@
	$(J_NQP) --module-path=blib --target=jar --output=$(PERL6_P_JAR) \
	    @nfp(src/Perl6/Pod.nqp)@

$(PERL6_A_JAR): @nfp(src/Perl6/Actions.nqp)@ $(PERL6_P_JAR) $(PERL6_OPS_JAR)
	$(J_NQP) $(J_GEN_CAT) @nfpl(src/Perl6/Actions.nqp \
                              src/Perl6/PodActions.nqp)@ > @nfpq($(J_BUILD_DIR)/Perl6-Actions.nqp)@
	$(J_NQP) --module-path=blib --target=jar --output=$(PERL6_A_JAR) \
	    @nfpq($(J_BUILD_DIR)/Perl6-Actions.nqp)@

$(PERL6_G_JAR): @nfp(src/Perl6/Grammar.nqp)@ $(PERL6_W_JAR) $(PERL6_A_JAR) $(PERL6_P_JAR)
	$(J_NQP) $(J_GEN_CAT) @nfpl(src/Perl6/Grammar.nqp \
                              src/Perl6/PodGrammar.nqp)@ > @nfpq($(J_BUILD_DIR)/Perl6-Grammar.nqp)@
	$(J_NQP) --module-path=blib --target=jar --output=$(PERL6_G_JAR) \
	    @nfpq($(J_BUILD_DIR)/Perl6-Grammar.nqp)@

$(PERL6_O_JAR): @nfp(src/Perl6/Optimizer.nqp)@ $(PERL6_OPS_JAR)
	$(J_NQP) $(J_GEN_CAT) @nfp(src/Perl6/Optimizer.nqp)@ > @nfpq($(J_BUILD_DIR)/Perl6-Optimizer.nqp)@
	$(J_NQP) --module-path=blib --target=jar --output=$(PERL6_O_JAR) \
	    @nfpq($(J_BUILD_DIR)/Perl6-Optimizer.nqp)@

$(PERL6_C_JAR): @nfp(src/Perl6/Compiler.nqp)@ $(PERL6_O_JAR)
	$(J_NQP) --module-path=blib --target=jar --output=$(PERL6_C_JAR) \
	    @nfp(src/Perl6/Compiler.nqp)@

$(PERL6_JAR): @nfp(src/main.nqp)@ $(RUNTIME_JAR) $(PERL6_G_JAR) $(PERL6_A_JAR) $(PERL6_C_JAR) $(PERL6_P_JAR) $(J_METAMODEL_SOURCES) $(BOOTSTRAP_SOURCES) $(J_CORE_SOURCES)@for_specs( $(J_CORE_@ucspec@_SOURCES))@
	$(CONFIGURE) --expand main-version --out @nfpq($(J_BUILD_DIR)/main-version.nqp)@
	$(J_NQP) $(J_GEN_CAT) @nfp(src/main.nqp)@ @nfpq($(J_BUILD_DIR)/main-version.nqp)@ > @nfpq($(J_BUILD_DIR)/main.nqp)@
	$(J_NQP) --module-path=blib --target=jar --javaclass=perl6 --output=$(PERL6_JAR) \
	    @nfpq($(J_BUILD_DIR)/main.nqp)@

$(PERL6_M_JAR): $(J_METAMODEL_SOURCES) $(PERL6_OPS_JAR)
	$(J_NQP) $(J_GEN_CAT) $(J_METAMODEL_SOURCES) > @nfpq($(J_BUILD_DIR)/Metamodel.nqp)@
	$(J_NQP) --module-path=blib --target=jar --output=$(PERL6_M_JAR) \
	    @nfpq($(J_BUILD_DIR)/Metamodel.nqp)@

$(PERL6_B_JAR): $(BOOTSTRAP_SOURCES) $(PERL6_M_JAR)
	$(J_NQP) $(J_GEN_CAT) $(BOOTSTRAP_SOURCES) > @nfpq($(J_BUILD_DIR)/BOOTSTRAP.nqp)@
	$(J_RUN_NQP_RR) --module-path=blib --target=jar --output=$(PERL6_B_JAR) @nfpq($(J_BUILD_DIR)/BOOTSTRAP.nqp)@

$(SETTING_JAR): $(PERL6_JAR) $(PERL6_B_JAR) $(J_CORE_SOURCES)
	$(CONFIGURE) --expand @shquot(@template(core_sources)@)@ \
				 --out @nfpq($(J_BUILD_DIR)/core_sources)@ \
				 --set-var=backend=@backend@
	$(J_NQP) $(J_GEN_CAT) -f @nfpq($(J_BUILD_DIR)/core_sources)@ > @nfpq($(J_BUILD_DIR)/CORE.setting)@
	@echo "The following step can take a long time, please be patient."
	@set_nqp_lib@$(J_RUN_PERL6) --setting=NULL --ll-exception --optimize=3 --target=jar --stagestats --output=$(SETTING_JAR) --nqp-lib=blib @nfpq($(J_BUILD_DIR)/CORE.setting)@

@for_specs($(SETTING_@ucspec@_JAR): $(PERL6_JAR) $(PERL6_@ucspec@_JAR) $(SETTING_JAR) $(J_CORE_SOURCES)
	$(J_NQP) $(J_GEN_CAT) $(J_CORE_@ucspec@_SOURCES) > @nfpq($(J_BUILD_DIR)/CORE.@lcspec@.setting)@
	@echo "The following step can take a long time, please be patient."
	@set_nqp_lib@$(J_RUN_PERL6) --setting=NULL.@lcspec@ --ll-exception --optimize=3 --target=jar --stagestats --output=$(SETTING_@ucspec@_JAR) --nqp-lib=blib @nfpq($(J_BUILD_DIR)/CORE.@lcspec@.setting)@
	
)@
$(J_RUNNER):    @@script(create-jvm-runner.pl)@@
	$(PERL5) @shquot(@script(create-jvm-runner.pl)@)@ dev . . @q($(NQP_PREFIX))@ --nqp-lib=blib @q($(NQP_JARS))@

j-runner-default: j-all
	$(CP) $(J_RUNNER) perl6$(J_BAT)
	$(CHMOD) 755 perl6$(J_BAT)

$(PERL6_DEBUG_JAR): @nfp(src/perl6-debug.nqp)@ $(PERL6_JAR)
	$(J_NQP) $(J_GEN_CAT) @nfp(src/perl6-debug.nqp)@ @nfpq($(J_BUILD_DIR)/main-version.nqp)@ > @nfpq($(J_BUILD_DIR)/perl6-debug.nqp)@
	$(J_NQP) --module-path=blib --target=jar --javaclass=perl6-debug --output=$(PERL6_DEBUG_JAR) \
	    @nfpq($(J_BUILD_DIR)/perl6-debug.nqp)@

$(J_DEBUG_RUNNER): @@script(create-jvm-runner.pl)@@ $(PERL6_DEBUG_JAR)
	$(PERL5) @shquot(@script(create-jvm-runner.pl)@)@ dev-debug . . @q($(NQP_PREFIX))@ --nqp-lib=blib @q($(NQP_JARS))@

eval-client.pl:
	$(CP) @nfpq($(SDKROOT)$(NQP_PREFIX)/bin/eval-client.pl)@ .

##  testing targets
j-test    : j-coretest

j-fulltest: j-coretest j-stresstest

j-coretest: j-all
	$(J_HARNESS5) @nfpl(t/01-sanity t/02-rakudo t/03-jvm t/04-nativecall t/05-messages t/06-telemetry t/07-pod-to-text t/08-performance t/10-qast)@

# Run the spectests that we know work.
j-spectest: j-testable @nfp(t/spectest.data)@
	$(J_HARNESS5_WITH_FUDGE) --tests-from-file=@nfp(t/spectest.data)@

j-spectest_full: j-testable
	$(J_HARNESS5_WITH_FUDGE) @nfp(t/spec)@

j-quicktest: j-testable @nfp(t/spectest.data)@
	$(J_HARNESS5_WITH_FUDGE) --tests-from-file=@nfp(t/spectest.data)@ --quick

j-stresstest: j-testable @nfp(t/spectest.data)@
	$(J_HARNESS5_WITH_FUDGE) --tests-from-file=@nfp(t/spectest.data)@ --stress

j-rakudo_test_run.tar.gz: j-testable @nfp(t/spectest.data)@
	- $(J_HARNESS5_WITH_FUDGE) --tests-from-file=@nfp(t/spectest.data)@ --archive j-rakudo_test_run.tar.gz

#spectest_smolder: rakudo_test_run.tar.gz
#	./perl6 -e "shell qqx[git log -1 --pretty=format:%H].fmt(qq[curl -F architecture=@cpuarch@ -F platform=@osname@ -F revision=%s -F report_file=@rakudo_test_run.tar.gz -F username=parrot-autobot -F password=qa_rocks http://smolder.parrot.org/app/projects/process_add_report/5])"

j-testable : j-all spectest_checkout spectest_update


# Run the tests in t/localtest.data
j-localtest: j-all spectest_checkout @nfp(t/localtest.data)@
	@$(J_HARNESS5_WITH_FUDGE) --tests-from-file=@nfp(t/localtest.data)@

# Run the tests in t/localtest.data with a higher verbosity
j-localtest_loud: j-all spectest_checkout @nfp(t/localtest.data)@
	@$(J_HARNESS5_WITH_FUDGE) --tests-from-file=@nfp(t/localtest.data)@ --verbosity=1

# Run many tests of your choice.
# make sometests TESTFILES=t/foo/bar
sometests: j-all
	@$(J_HARNESS5_WITH_FUDGE) $(TESTFILES)

j-install: j-all @@script(create-jvm-runner.pl)@@ @@script(install-core-dist.p6)@@
	$(MKPATH) @nfpq($(DESTDIR)$(PREFIX)/bin)@
	$(MKPATH) @nfpq($(DESTDIR)$(J_LIBPATH)/Perl6)@
	$(MKPATH) @nfpq($(DESTDIR)$(PERL6_HOME)/runtime)@
	$(CP) $(PERL6_LANG_JARS) @nfpq($(DESTDIR)$(J_LIBPATH)/Perl6)@
	$(CP) $(SETTING_JAR) $(SETTING_D_JAR) @nfpq($(DESTDIR)$(PERL6_HOME)/runtime)@
	$(CP) $(PERL6_JAR) @nfpq($(DESTDIR)$(PERL6_HOME)/runtime)@
	$(CP) $(PERL6_DEBUG_JAR) @nfpq($(DESTDIR)$(PERL6_HOME)/runtime)@
	$(CP) $(RUNTIME_JAR) @nfpq($(DESTDIR)$(PERL6_HOME)/runtime)@
	@nfpq($(BASE_DIR)/$(J_RUNNER))@ @shquot(@script(upgrade-repository.p6)@)@ @shquot($(DESTDIR)$(PERL6_HOME))@
	$(MKPATH) @nfpq($(DESTDIR)$(PERL6_HOME)/vendor)@
	@nfpq($(BASE_DIR)/$(J_RUNNER))@ @shquot(@script(upgrade-repository.p6)@)@ @nfpq($(DESTDIR)$(PERL6_HOME)/vendor)@
	$(MKPATH) @nfpq($(DESTDIR)$(PERL6_HOME)/site)@
	@nfpq($(BASE_DIR)/$(J_RUNNER))@ @shquot(@script(upgrade-repository.p6)@)@ @nfpq($(DESTDIR)$(PERL6_HOME)/site)@
	@nfpq($(BASE_DIR)/$(J_RUNNER))@ @shquot(@script(install-core-dist.p6)@)@ @shquot($(DESTDIR)$(PERL6_HOME))@
	$(PERL5) @shquot(@script(create-jvm-runner.pl)@)@ install @q($(DESTDIR))@ @q($(PREFIX))@ @q($(NQP_PREFIX))@ "" @q($(NQP_JARS))@
	$(PERL5) @shquot(@script(create-jvm-runner.pl)@)@ install-debug @q($(DESTDIR))@ @q($(PREFIX))@ @q($(NQP_PREFIX))@ "" @q($(NQP_JARS))@

j-runner-default-install: j-install
	$(PERL5) @shquot(@script(create-jvm-runner.pl)@)@ install @q($(DESTDIR))@ @q($(PREFIX))@ @q($(NQP_PREFIX))@ "" @q($(NQP_JARS))@
	$(CP) @nfpq($(DESTDIR)$(PREFIX)/bin/perl6-j$(J_BAT))@ @nfpq($(DESTDIR)$(PREFIX)/bin/perl6$(J_BAT))@
	$(CHMOD) 755 @nfpq($(DESTDIR)$(PREFIX)/bin/perl6$(J_BAT))@

##  cleaning
j-clean:
	$(RM_F) $(J_CLEANUPS)
	$(RM_RF) bin

j-testclean:

# vim: ft=make noexpandtab ts=4 sw=4
